'''
Uses the eigenvalues file generated by Octopus and makes its information
available to use

Information contained in bandstructure file
-------------------------------------------
eigenvalues -> occupation, number of occupied bands, number of unoccupied bands
'''

import numpy as np

class Eigenvalues():


    def __init__(self, filepath, num_kpoints, num_bands):
        '''
        '''
        
        self._eigenvalues = None
        self._eigenvalues_path = filepath + 'eigenvalues'
        self._num_bands = num_bands
        self._num_kpoints = num_kpoints
        self.num_occ_bands = None
        self.num_unocc_bands = None
        self._load_eigenvalues()


    def get_occupancies(self):
        '''
        '''

        # find the index of the match and get numkpoints of lines results
        match = ' #st  Spin   Eigenvalue      Occupation     Error'
        start = self._eigenvalues.index(match)

        # start at the second line not including the matched text
        eigenvalues_table = self._eigenvalues[start:][1:]

        # remove the kpoint lines
        eigenvalues_table = [value for value in eigenvalues_table if '#k' not in value]

        # place the occupancies into a numpy array
        occupancy_list = [row.split()[3] for row in eigenvalues_table]
        occupancies = np.array(occupancy_list)

        # change to shape (num_kpoints, num_bands)
        occupancies.shape = (self._num_kpoints, self._num_bands)
        self.occupancies = occupancies.astype('float64')

        return(self.occupancies)

    def get_num_occ_bands(self):
        '''
        '''

        # any nonzero occupancy is considered occupied
        num_occ_bands = np.count_nonzero(self.occupancies[0])
        self.num_occ_bands = num_occ_bands
        return(self.num_occ_bands)

    def _load_eigenvalues(self):
        '''
        Loads the eigenvalues file as a list of lines

        Returns:
          eigenvalues (list string): list of lines from eigenvalues
        '''

        f = open(self._eigenvalues_path, 'r')
        text = f.read()

        # creates a list of lines rather than a long string with newline characters
        self._eigenvalues = text.splitlines()
        f.close()